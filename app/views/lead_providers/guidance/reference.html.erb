<%= content_for :title, t("page_titles.lead_providers.guidance.reference") %>
<% content_for :nav_bar do %>
  <%= render PrimaryNavComponent.new do |component| %>
    <%= component.nav_item(path: lead_providers_guidance_home_path) do %>
      Home
    <% end %>
    <%= component.nav_item(path: lead_providers_guidance_ecf_usage_path) do %>
      ECF usage guide
    <% end %>
    <%= component.nav_item(path: lead_providers_guidance_npq_usage_path) do %>
      NPQ usage guide
    <% end %>
    <%= component.nav_item(path: lead_providers_guidance_reference_path) do %>
      API reference
    <% end %>
    <%= component.nav_item(path: lead_providers_guidance_release_notes_path) do %>
      Release notes
    <% end %>
    <%= component.nav_item(path: lead_providers_guidance_help_path) do %>
      Get help
    <% end %>
  <% end %>
<% end %>

<h1 class="govuk-heading-xl"><%= t("page_titles.lead_providers.guidance.reference") %></h1>

<h2 class="app-contents-list__title">Contents</h2>

<ol class="app-contents-list__list">
  <li class="app-contents-list__list-item app-contents-list__list-item--parent"><%= govuk_link_to 'Developing on the API', '#developing', class: 'app-contents-list__link' %></li>
  <li class="app-contents-list__list-item app-contents-list__list-item--parent">
    <%= govuk_link_to 'Endpoints', '#endpoints', class: 'app-contents-list__link' %>

    <ol class="app-contents-list__nested-list">
      <% @api_reference.operations.each do |operation| %>
        <li class="app-contents-list__list-item app-contents-list__list-item--dashed">
          <%= govuk_link_to operation.name, "##{operation.anchor}", class: 'app-contents-list__link' %>
        </li>
      <% end %>
    </ol>
  </li>
  <li class="app-contents-list__list-item app-contents-list__list-item--parent">
    <%= govuk_link_to 'Objects', '#objects', class: 'app-contents-list__link' %>

    <ol class="app-contents-list__nested-list">
      <% @api_reference.schemas.each do |schema| %>
        <li class="app-contents-list__list-item app-contents-list__list-item--dashed">
          <%= govuk_link_to schema.name, "##{schema.anchor}", class: 'app-contents-list__link' %>
        </li>
      <% end %>
    </ol>
  </li>
</ol>

<hr class="govuk-section-break govuk-section-break--visible govuk-!-margin-top-6 govuk-!-margin-bottom-6">

<h2 class="govuk-heading-l" id="developing">Developing on the API</h2>

<p class="govuk-body">
  The OpenAPI spec from which this documentation is generated is <%= govuk_link_to 'available in YAML format', lead_providers_api_docs_url %>.
</p>

<h3 class="govuk-heading-m">Environments</h3>

<p class="govuk-body">
  We have a production environment and a sandbox environment.
</p>

<p class="govuk-body">
  The <strong>Lead Provider sandbox</strong> is for testing your integration. When we
  set you up with an API key, weâ€™ll create a test provider as well.
</p>

<p class="govuk-body">
  <code>https://ecf-sandbox.london.cloudapps.digital/api/v1</code>
</p>

<p class="govuk-body">
  The <strong>Production</strong> environment is the real environment. Do not
  perform testing here.
</p>

<p class="govuk-body">
  <code>https://manage-training-for-early-career-teachers.education.gov.uk/api/v1</code>
</p>

<h3 class="govuk-heading-m">Rate limits</h3>

<p class="govuk-body">
  You are limited to 300 requests per 5 minutes.
</p>

<p class="govuk-body">
  This limit is calculated on a rolling basis, per API key.
  If you exceed the limit, you will see <code>429</code> HTTP status codes.
</p>

<h3 id="authentication" class="govuk-heading-m">Authentication</h3>

<p class="govuk-body">
  All requests must be accompanied by an <code>Authorization</code> request header (not as part of the URL) in the following format:
</p>

<p class="govuk-body">
  <code>
    Authorization: Bearer {token}
  </code>
</p>

<p class="govuk-body">
  Unauthenticated requests will receive an <%= govuk_link_to 'UnauthorizedResponse', '#unauthorizedresponse-object' %>
  with a <code>401</code> status code.
</p>

<h3 id="custom-headers" class="govuk-heading-m">Custom API Headers for Sandbox testing</h3>

<p class="govuk-body">
  The sandbox environment supports the following custom header to enable testing:
  <code>
    X-With-Server-Date
  </code>
</p>

<h4 id="x-with-server-date">
  Using the X-With-Server-Date header
</h4>

<p class="govuk-body">
  Declaration submissions are made by providers in line with contractual milestones. These are required to fall into specific date periods.
</p>
<p class="govuk-body">
  To test the integration more thoroughly, a custom JSON header can be used when making declarations in the sandbox.
</p>
<p class="govuk-body">
  This header, X-With-Server-Date, is set as a standard JSON header to simulate declaration submissions against future milestone date periods.
</p>
<p class="govuk-body">
  It lets you see what would happen when submitting declarations for that time, which would not be valid for the current milestone periodm, for example, forward declarations, but simulated as current declarations for a later milestone.
</p>
<p class="govuk-body">
  This header is only valid on the sandbox system.
</p>
<p class="govuk-body">
  Trying to submit future declarations on production systems or without this header would be rejected as part of normal validation.
</p>
<p class="govuk-body">
  To set the header:
</p>
<ol  class="govuk-list govuk-list--number">
  <li>
    Select header (in Postman)
  </li>
  <li>
    Key = X-With-Server-Date
  </li>
  <li>
    Value = date you choose in ISO8601 Date with time and Timezone (i.e. RFC3339 format) 2022-01-10T10:42:00Z
  </li>
</ol>


<h3 id="csv-file-postman" class="govuk-heading-m">Using Postman to submit from Test runner</h3>

<p class="govuk-body">As the declarations service is API only, uploading CSV files directly is not possible.. However, this can be done with a script runner.</p>
<p class="govuk-body">To do this, you need to create a collection which supports a single declaration test with a <code>Pre-request script</code>.</p>

<h3 id="csv-collection" class="govuk-heading-s">Create a new collection</h3>

<p class="govuk-body">Create a New Collection and name it "CSV Started Declaration Submission"</p>

<p class="govuk-body">For this collection, you will need to set <code>Authorization</code> to the following value:</p>
<p class="govuk-body"><pre><code>
Type: Bearer Token
Token: {{bearerToken}}
</code></pre></p>

<p class="govuk-body">The <code>Pre-request script</code> should contain the following code to set the "request_body" previously set in the Body</p>
<%=postman_code_sample(%Q[pm.environment.set('request_body', JSON.stringify({
  "data": {
    "type": "participant-declaration",
    "attributes": {
      "participant_id": data.id,
      "declaration_date": data.declaration_date,
      "declaration_type": "started",
      "course_identifier": data.participant_type == "ect" ? "ecf-induction" : "ecf-mentor"
    }
  }
}))])%>

<p class="govuk-body">The <code>Test</code> should contain the following to determine the success of the declaration submission.</p>
<%=postman_code_sample(%Q[pm.test("Send declaration via csv file", function(){
  pm.response.to.have.status(200);
})])%>

<p class="govuk-body">
  Save the collection using the icon at the top right
</p>

<p class="govuk-body">
  This collection is a wrapper within which you will need a single test with an endpoint to run against. This test will contain just a single line which the pre-request script will update for each iteration of the test using the contents of a csv file chosen when running the test Using "Runner"
</p>

<h3 id="csv-collection" class="govuk-heading-s">Create a new request</h3>

<p class="govuk-body">
  Under the CSV Started Declaration Submission, select the "Add a request" to create the new action and endpoint.
</p>

<p class="govuk-body">
  Name this test <code>Declare a participant from the CSV file</code>
</p>

<p class="govuk-body">
  Set the operation type to <code>POST</code> and the endpoint to <code>{{baseUrl}}/api/v1/participant-declarations</code>
</p>

<p class="govuk-body">
  Set the Body type to "raw" and enter
  <code>
    {{request_body}}
  </code>
</p>

<p class="govuk-body">Save the request using the icon at the top right of the screen.</p>

<h3 id="update-environment" class="govuk-heading-s">Populate the required environment</h3>

<p class="govuk-body">Before making submissions, you need to create the two variables <code>{{baseUrl}}</code> and <code>{{bearerToken}}</code></p>

<p class="govuk-body">These are required to be set as variables for the environment in which you wish to run this selection of declarations.</p>

<p class="govuk-body">Choose the Variables tab and create the baseUrl and bearerToken variables.</p>

<p class="govuk-body">Set these to the API URL address and Token you have for that location.</p>

<h3 id="create-csv">Create a CSV file for upload</h3>

<p class="govuk-body">The script requires populating from a CSV file. This file requires the headings:</p>

<ul><li>id</li><li>declaration_date</li><li>participant_type</li></ul>

<p class="govuk-body">where</p>

<ul><li>id - the participant id</li><li>declaration_date - the date of the declaration in RCF3339 format (i.e. yyyy-mm-ddThh:mm:ssZ)</li><li>participant_type - ecf, or mentor</li></ul>

<p class="govuk-body">Note the id and participant_type fields can be used directly from the participants download csv, but the declaration_date column would need to be added to this in the correct format.</p>

<p class="govuk-body">Save this file as <code>declaration_submission_ddmmyyyy.csv</code> in a location you can attach the script runner to.</p>

<h3 id="run-script">Use Postman Runner to submit multiple declarations</h3>

<p class="govuk-body">From Postman, select the Runner icon from the right of the bottom toolbar</p>

<p class="govuk-body">Drag the CSV Started Declaration Submission collection into the RUN ORDER box</p>

<p class="govuk-body">Select the Data </p>

<p class="govuk-body"></p>


<%= render(ApiDocs::ApiReferenceComponent.new(@api_reference)) %>
