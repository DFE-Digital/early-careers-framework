name: Backup and Upload production DB
description: Backup production DB and upload to azure

inputs:
  azure-client-id:
    description: Azure Client ID
    required: true
  azure-tenant-id:
    description: Azure Tenant ID
    required: true
  azure-subscription-id:
    description: Azure Subscription ID
    required: true
  namespace:
    description: Namespace to deploy to
    type: string

runs:
  using: composite

  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        tf_vars_file=terraform/application/workspace_variables/${{ inputs.environment }}.tfvars.json
        echo "namespace=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Set AKS credentials
      shell: bash
      run: make ci production get-cluster-credentials

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - name: Install konduit
      shell: bash
      run: make install-konduit

    - name: Backup database
      shell: bash
      run: |
        bin/konduit.sh -n ${{ env.namespace }} cpd-ecf-production-web -- pg_dump -E utf8 --compress=1 --clean --if-exists --no-privileges --no-owner --verbose -f backup-production.sql.gz

    - name: Set connection string
      shell: bash
      run: |
        STORAGE_CONN_STR=$(az storage account show-connection-string -g s189p01-cpdecf-pd-rg -n s189p01cpdecfdbbkppdsa --query 'connectionString')
        echo "::add-mask::$STORAGE_CONN_STR"
        echo "AZURE_STORAGE_CONNECTION_STRING=$STORAGE_CONN_STR" >> $GITHUB_ENV

    - name: Upload backup
      shell: bash
      run: |
        az config set extension.use_dynamic_install=yes_without_prompt
        az config set core.only_show_errors=true
        az storage azcopy blob upload \
          --container database-backup \
          --source backup-production.sql.gz \
          --destination $(date +"%F-%H").sql.gz

    - uses: Azure/get-keyvault-secrets@v1
      if: failure()
      id: key-vault-secrets
      with:
        keyvault: s189p01-cpdecf-pd-app-kv
        secrets: "SLACK-WEBHOOK"

    - name: Notify Slack channel on job failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Database backup failure
        SLACK_MESSAGE: Production database backup job failed
        SLACK_WEBHOOK: ${{ steps.key-vault-secrets.outputs.SLACK-WEBHOOK }}
        SLACK_COLOR: failure
        SLACK_FOOTER: Sent from backup-production job in database-backups workflow
