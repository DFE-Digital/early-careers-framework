name: Backup DB
description: Backup production DB and restore to snapshot DB

inputs:
  environment:
    description: The name of the environment
    required: true
  azure-client-id:
    description: Azure Client ID
    required: true
  azure-tenant-id:
    description: Azure Tenant ID
    required: true
  azure-subscription-id:
    description: Azure Subscription ID
    required: true
  exclude-versions:
    description: Exclude 'versions' table
    type: boolean
  exclude-api-requests:
    description: Exclude 'api_requests' table
    type: boolean

runs:
  using: composite

  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        tf_vars_file=terraform/application/workspace_variables/${{ inputs.environment }}.tfvars.json
        echo "NAMESPACE=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Set AKS credentials
      shell: bash
      run: make ci production get-cluster-credentials

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - name: Install konduit
      shell: bash
      run: make install-konduit

    - name: Backup database
      shell: bash
      run: |
        # Build up exclude arguments based on flags
        EXCLUDE_ARGS=""

        if [ "${{ inputs.exclude-versions }}" = "true" ]; then
          EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude-table-data versions"
        fi

        if [ "${{ inputs.exclude-api-requests }}" = "true" ]; then
          EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude-table-data api_requests"
        fi

        echo "Excluding tables (if any): $EXCLUDE_ARGS"

        bin/konduit.sh -n ${{ env.NAMESPACE }} cpd-ecf-${{ inputs.environment }}-web -- pg_dump -E utf8 --compress=1 --clean --if-exists $EXCLUDE_ARGS --no-privileges --no-owner --verbose -f backup-${{ inputs.environment }}.sql.gz

    - name: Restore snapshot database
      shell: bash
      run: bin/konduit.sh -n ${{ env.NAMESPACE }} -d s189p01-cpdecf-pd-pg-snapshot -k s189p01-cpdecf-pd-app-kv -i backup-${{ inputs.environment }}.sql.gz -c -t 7200 cpd-ecf-${{ inputs.environment }}-web -- psql -v ON_ERROR_STOP=1
