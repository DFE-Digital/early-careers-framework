name: Restore database from Azure storage

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to restore
        required: true
        default: development
        type: choice
        options:
          - migration
          - staging
          - production
      confirm-production:
        description: Must be set to true if restoring production
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      backup-file:
        description: Name of the backup file in Azure storage. e.g. cpdnpq_prod_2024-08-09.sql.gz. The default value is today's scheduled backup.
        type: string
        required: false

env:
  SERVICE_NAME: cpd-ecf
  SERVICE_SHORT: cpdecf
  TF_VARS_PATH: terraform/application/workspace_variables

jobs:
  restore:
    name: Restore AKS Database
    if: ${{ inputs.environment != 'production' || (inputs.environment == 'production' && github.event.inputs.confirm-production == 'true' ) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    environment: ${{ inputs.environment }}
    concurrency: deploy_${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4
        name: Checkout

      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set environment variables
        run: |
          source global_config/${{ inputs.environment }}.sh
          echo "CONFIG=${CONFIG}" >> $GITHUB_ENV
          tf_vars_file=${{ env.TF_VARS_PATH }}/${{ inputs.environment }}.tfvars.json
          echo "NAMESPACE=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV
          echo "CLUSTER=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=${AZURE_RESOURCE_PREFIX}-${SERVICE_SHORT}-${CONFIG_SHORT}-rg" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=${AZURE_RESOURCE_PREFIX}${SERVICE_SHORT}dbbkp${CONFIG_SHORT}sa" >> $GITHUB_ENV
          echo "DB_SERVER=${AZURE_RESOURCE_PREFIX}-${SERVICE_SHORT}-${CONFIG_SHORT}-pg" >> $GITHUB_ENV
          TODAY=$(date +"%F")
          echo "BACKUP_FILE=${SERVICE_SHORT}_${CONFIG_SHORT}_${TODAY}.sql" >> $GITHUB_ENV
          if [ "${{ inputs.backup-file }}" != "" ]; then
            BACKUP_FILE=${{ inputs.backup-file }}
          else
            BACKUP_FILE=${SERVICE_SHORT}_${CONFIG_SHORT}_${TODAY}.sql.gz
          fi
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Restore ${{ inputs.environment }} postgres
        uses: DFE-Digital/github-actions/restore-postgres-backup@master
        with:
          storage-account: ${{ env.STORAGE_ACCOUNT_NAME }}
          resource-group: ${{ env.RESOURCE_GROUP_NAME }}
          app-name: ${{ env.SERVICE_NAME }}-${{ inputs.environment }}-web
          cluster: ${{ env.CLUSTER }}
          namespace: ${{ env.NAMESPACE }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          backup-file: ${{ env.BACKUP_FILE }}
