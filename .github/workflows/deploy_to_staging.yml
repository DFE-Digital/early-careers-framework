name: Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      version:
        description: Which version are you creating? ("vx.x.x")
        required: true
      ref:
        description: Git ref to deploy
        required: true
        default: main

jobs:
  validate-inputs:
    runs-on: ubuntu-20.04

    steps:
      - name: Check tag format
        run: |
          echo ${{ github.event.inputs.version }} | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$'

  tag-image:
    runs-on: ubuntu-20.04
    needs: [validate-inputs]

    steps:
      - uses: actions/checkout@v3
        name: Checkout Code
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: Tag deployment
        run: |
          git tag --force ${{ github.event.inputs.version }}
          git push --force origin refs/tags/${{ github.event.inputs.version }}
          echo "HEAD=$(git rev-parse ${{ github.event.inputs.version }})" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_DEV_PASSWORD }}

      - name: retag docker image
        run: |
          docker pull ${{ env.DOCKER_REPOSITORY }}-prod:${{ env.HEAD }}
          docker tag ${{ env.DOCKER_REPOSITORY }}-prod:${{ env.HEAD }} ${{ env.DOCKER_REPOSITORY }}-prod:${{ github.event.inputs.version }}
          docker push ${{ env.DOCKER_REPOSITORY }}-prod:${{ github.event.inputs.version }}

  deploy-to-staging:
    runs-on: ubuntu-20.04
    needs: [tag-image]
    concurrency:
      group: deploy-to-staging

    steps:
      - uses: actions/checkout@v3
        name: Checkout Code
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: Pin Terraform version
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 0.14.0

      - name: Deploy to staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          TF_VAR_paas_user: ${{ secrets.GOVPAAS_STAG_USERNAME }}
          TF_VAR_paas_password: ${{ secrets.GOVPAAS_STAG_PASSWORD }}
          TF_VAR_statuscake_api_token: ${{ secrets.STATUSCAKE_API_TOKEN }}
        run: |
          export TF_VAR_paas_app_docker_image=${{ env.DOCKER_REPOSITORY }}-prod:${{ github.event.inputs.version }}
          cd terraform/app
          terraform init -reconfigure -input=false -backend-config="bucket=paas-s3-broker-prod-lon-e2123d0b-d394-4594-8056-315300e7d8a8"
          terraform apply -input=false -auto-approve -var-file ../workspace-variables/staging.tfvars -var='secret_paas_app_env_values={"RAILS_MASTER_KEY":"${{secrets.RAILS_MASTER_KEY_STAGING}}", "RELEASE_VERSION":"${{github.event.inputs.version}}"}' -var 'logstash_url=${{secrets.SYSLOG_DRAIN_URL}}' -var 'docker_username=${{ secrets.DOCKER_USERNAME }}' -var 'docker_password=${{ secrets.DOCKER_DEV_PASSWORD }}'

  post-release-notes:
    runs-on: ubuntu-20.04
    needs: [deploy-to-staging]

    steps:
      - uses: actions/checkout@v3
        name: Checkout Code
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: Set release notes
        id: notes
        run: |
          git fetch --tags
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$(git log --first-parent --pretty='format: %b (%an)' $(git tag -l | sort -V | tail -2 | head -1)..${{ github.event.inputs.version }})" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post release notes on cpd-dev-alerts
        uses: rtCamp/action-slack-notify@v2.2.1
        env:
          SLACK_CHANNEL: cpd-dev-alerts
          SLACK_USERNAME: Release notes bot
          SLACK_TITLE: Version ${{ github.event.inputs.version }} release notes
          SLACK_MESSAGE: ${{ steps.notes.outputs.release_notes }}
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.ALERTMANAGER_SLACK_URL }}
