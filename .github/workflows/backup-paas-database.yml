name: Backup GOV.UK PaaS DB and restore in Azure
on:
  workflow_dispatch:
    inputs:
      environment:
        description: GitHub environment to backup and restore
        type: choice
        default: staging
        options:
          - staging
          - sandbox
          - production
        required: true
  workflow_call:
    inputs:
      environment:
        description: GitHub environment to backup and restore
        type: string
        required: true
        default: staging

jobs:
  backup:
    name: Backup (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Setup cf cli (staging)
        if: github.event.inputs.environment == 'staging'
        uses: DFE-Digital/github-actions/setup-cf-cli@master
        with:
          CF_USERNAME: ${{ secrets.GOVPAAS_STAG_USERNAME }}
          CF_PASSWORD: ${{ secrets.GOVPAAS_STAG_PASSWORD }}
          CF_SPACE_NAME: early-careers-framework-staging
          INSTALL_CONDUIT: true

      - name: Setup cf cli (sandbox)
        if: github.event.inputs.environment == 'sandbox'
        uses: DFE-Digital/github-actions/setup-cf-cli@master
        with:
          CF_USERNAME: ${{ secrets.GOVPAAS_SAND_USERNAME }}
          CF_PASSWORD: ${{ secrets.GOVPAAS_SAND_PASSWORD }}
          CF_SPACE_NAME: early-careers-framework-sandbox
          INSTALL_CONDUIT: true

      - name: Setup cf cli (production)
        if: github.event.inputs.environment == 'production'
        uses: DFE-Digital/github-actions/setup-cf-cli@master
        with:
          CF_USERNAME: ${{ secrets.GOVPAAS_PROD_USERNAME }}
          CF_PASSWORD: ${{ secrets.GOVPAAS_PROD_PASSWORD }}
          CF_SPACE_NAME: early-careers-framework-prod
          INSTALL_CONDUIT: true

      - name: Setup postgres client
        uses: DFE-Digital/github-actions/install-postgres-client@master

      - name: Backup database (staging, sandbox)
        if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'sandbox'
        run: |
          cf conduit ecf-postgres-${{ github.event.inputs.environment }} -- pg_dump -E utf8 --clean --compress=1 --if-exists --no-owner --no-privileges --verbose -f backup.sql.gz

      # this is temporary while we test restoring production using the backup, re-merge it with
      # the step above when we're ready to test for real
      - name: Backup database (production)
        if: github.event.inputs.environment == 'production'
        run: |
          cf conduit ecf-postgres-production-backup-restore -- pg_dump -E utf8 --clean --compress=1 --if-exists --no-owner --no-privileges --verbose -f backup.sql.gz

      - name: Upload backup
        uses: actions/upload-artifact@v3
        with:
          name: backup
          path: backup.sql.gz
          retention-days: 1

  restore:
    name: Restore (${{ github.event.inputs.environment }})
    environment:
      name: ${{ github.event.inputs.environment }}
    needs: [backup]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download backup
        uses: actions/download-artifact@v3
        with:
          name: backup

      - name: Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS credentials (staging)
        shell: bash
        if: github.event.inputs.environment == 'staging'
        run: az aks get-credentials -g s189t01-tsc-ts-rg -n s189t01-tsc-test-aks

      - name: Set AKS credentials (sandbox, production)
        if: github.event.inputs.environment == 'sandbox' || github.event.inputs.environment == 'production'
        shell: bash
        run: az aks get-credentials -g s189p01-tsc-pd-rg -n s189p01-tsc-production-aks

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Install konduit
        run: make install-konduit

      - name: Restore database
        run: bin/konduit.sh -i backup.sql.gz -c cpd-ecf-${{ github.event.inputs.environment }}-web -- psql

      - name: Remove PaaS event triggers
        shell: bash
        run: |
          bin/konduit.sh cpd-ecf-${{ github.event.inputs.environment }}-web -- psql -c 'drop event trigger forbid_ddl_reader; drop event trigger make_readable; drop event trigger reassign_owned;'

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: backup
